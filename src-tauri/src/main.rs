#![cfg_attr(
    all(not(debug_assertions), target_os = "windows"),
    windows_subsystem = "windows"
)]

mod survival;
use std::collections::HashMap;

#[tauri::command]
fn usage() -> HashMap<u8, [f32;6]> {
  let usage_data = HashMap::from([
    (0, [2.900E+00, 2.900E+00, 1.911E-01, 1.880E-01, 4.777E+02, 4.700E+02]),
    (1, [5.200E+00, 5.200E+00, 2.225E-01, 2.162E-01, 7.912E+02, 7.517E+02]),
    (2, [6.480E+00, 6.480E+00, 2.856E-01, 2.725E-01, 1.109E+03, 1.033E+03]),
    (3, [7.287E+00, 7.287E+00, 3.678E-01, 3.457E-01, 1.300E+03, 1.202E+03]),
    (4, [7.949E+00, 7.949E+00, 4.641E-01, 4.314E-01, 1.441E+03, 1.327E+03]),
    (5, [8.800E+00, 8.800E+00, 5.416E-01, 4.993E-01, 1.566E+03, 1.431E+03]),
    (6, [9.975E+00, 1.013E+01, 5.949E-01, 5.451E-01, 1.642E+03, 1.491E+03]),
    (7, [1.132E+01, 1.178E+01, 6.355E-01, 5.796E-01, 1.706E+03, 1.547E+03]),
    (8, [1.272E+01, 1.341E+01, 6.690E-01, 6.074E-01, 1.776E+03, 1.605E+03]),
    (9, [1.409E+01, 1.470E+01, 6.971E-01, 6.293E-01, 1.847E+03, 1.650E+03]),
    (10, [1.530E+01, 1.530E+01, 7.248E-01, 6.486E-01, 1.919E+03, 1.684E+03]),
    (11, [1.641E+01, 1.542E+01, 7.535E-01, 6.644E-01, 1.993E+03, 1.705E+03]),
    (12, [1.750E+01, 1.549E+01, 7.837E-01, 6.766E-01, 2.078E+03, 1.727E+03]),
    (13, [1.852E+01, 1.554E+01, 8.176E-01, 6.879E-01, 2.186E+03, 1.763E+03]),
    (14, [1.940E+01, 1.560E+01, 8.563E-01, 6.996E-01, 2.306E+03, 1.801E+03]),
    (15, [2.010E+01, 1.570E+01, 8.995E-01, 7.119E-01, 2.425E+03, 1.828E+03]),
    (16, [2.069E+01, 1.599E+01, 9.485E-01, 7.243E-01, 2.568E+03, 1.851E+03]),
    (17, [2.126E+01, 1.650E+01, 1.004E+00, 7.358E-01, 2.739E+03, 1.878E+03]),
    (18, [2.174E+01, 1.706E+01, 1.061E+00, 7.460E-01, 2.874E+03, 1.903E+03]),
    (19, [2.208E+01, 1.751E+01, 1.101E+00, 7.477E-01, 2.934E+03, 1.917E+03]),
    (20, [2.220E+01, 1.770E+01, 1.137E+00, 7.543E-01, 2.952E+03, 1.927E+03]),
    (21, [2.220E+01, 1.770E+01, 1.165E+00, 7.622E-01, 2.986E+03, 1.938E+03]),
    (22, [2.220E+01, 1.770E+01, 1.185E+00, 7.695E-01, 3.033E+03, 1.951E+03]),
    (23, [2.220E+01, 1.770E+01, 1.215E+00, 7.846E-01, 3.069E+03, 1.961E+03]),
    (24, [2.220E+01, 1.770E+01, 1.239E+00, 7.949E-01, 3.093E+03, 1.967E+03]),
    (25, [2.220E+01, 1.770E+01, 1.260E+00, 8.036E-01, 3.106E+03, 1.970E+03]),
    (26, [2.220E+01, 1.770E+01, 1.279E+00, 8.129E-01, 3.108E+03, 1.970E+03]),
    (27, [2.220E+01, 1.770E+01, 1.297E+00, 8.231E-01, 3.099E+03, 1.967E+03]),
    (28, [2.220E+01, 1.770E+01, 1.314E+00, 8.340E-01, 3.078E+03, 1.961E+03]),
    (29, [2.220E+01, 1.770E+01, 1.329E+00, 8.459E-01, 3.045E+03, 1.951E+03]),
    (30, [2.220E+01, 1.770E+01, 1.343E+00, 8.583E-01, 3.015E+03, 1.942E+03]),
    (31, [2.220E+01, 1.770E+01, 1.357E+00, 8.708E-01, 3.004E+03, 1.940E+03]),
    (32, [2.220E+01, 1.770E+01, 1.370E+00, 8.827E-01, 3.000E+03, 1.939E+03]),
    (33, [2.220E+01, 1.770E+01, 1.384E+00, 8.938E-01, 2.993E+03, 1.937E+03]),
    (34, [2.220E+01, 1.770E+01, 1.398E+00, 9.042E-01, 2.981E+03, 1.933E+03]),
    (35, [2.220E+01, 1.770E+01, 1.411E+00, 9.145E-01, 2.965E+03, 1.927E+03]),
    (36, [2.220E+01, 1.770E+01, 1.424E+00, 9.248E-01, 2.945E+03, 1.920E+03]),
    (37, [2.220E+01, 1.770E+01, 1.437E+00, 9.352E-01, 2.921E+03, 1.910E+03]),
    (38, [2.220E+01, 1.770E+01, 1.448E+00, 9.457E-01, 2.892E+03, 1.899E+03]),
    (39, [2.220E+01, 1.770E+01, 1.459E+00, 9.563E-01, 2.860E+03, 1.885E+03]),
    (40, [2.220E+01, 1.770E+01, 1.470E+00, 9.669E-01, 2.828E+03, 1.873E+03]),
    (41, [2.220E+01, 1.770E+01, 1.480E+00, 9.775E-01, 2.804E+03, 1.864E+03]),
    (42, [2.220E+01, 1.770E+01, 1.489E+00, 9.878E-01, 2.784E+03, 1.857E+03]),
    (43, [2.220E+01, 1.770E+01, 1.499E+00, 9.978E-01, 2.762E+03, 1.848E+03]),
    (44, [2.220E+01, 1.770E+01, 1.508E+00, 1.007E+00, 2.739E+03, 1.839E+03]),
    (45, [2.220E+01, 1.770E+01, 1.519E+00, 1.018E+00, 2.714E+03, 1.828E+03]),
    (46, [2.220E+01, 1.770E+01, 1.534E+00, 1.032E+00, 2.688E+03, 1.816E+03]),
    (47, [2.220E+01, 1.770E+01, 1.556E+00, 1.050E+00, 2.660E+03, 1.803E+03]),
    (48, [2.220E+01, 1.770E+01, 1.584E+00, 1.072E+00, 2.631E+03, 1.789E+03]),
    (49, [2.220E+01, 1.770E+01, 1.614E+00, 1.096E+00, 2.601E+03, 1.774E+03]),
    (50, [2.220E+01, 1.770E+01, 1.643E+00, 1.119E+00, 2.570E+03, 1.758E+03]),
    (51, [2.220E+01, 1.770E+01, 1.669E+00, 1.140E+00, 2.542E+03, 1.743E+03]),
    (52, [2.220E+01, 1.770E+01, 1.691E+00, 1.159E+00, 2.515E+03, 1.730E+03]),
    (53, [2.220E+01, 1.770E+01, 1.710E+00, 1.175E+00, 2.489E+03, 1.717E+03]),
    (54, [2.220E+01, 1.770E+01, 1.726E+00, 1.189E+00, 2.464E+03, 1.705E+03]),
    (55, [2.220E+01, 1.770E+01, 1.739E+00, 1.201E+00, 2.440E+03, 1.693E+03]),
    (56, [2.220E+01, 1.770E+01, 1.747E+00, 1.211E+00, 2.416E+03, 1.683E+03]),
    (57, [2.220E+01, 1.770E+01, 1.753E+00, 1.219E+00, 2.394E+03, 1.673E+03]),
    (58, [2.220E+01, 1.770E+01, 1.755E+00, 1.225E+00, 2.371E+03, 1.664E+03]),
    (59, [2.220E+01, 1.770E+01, 1.754E+00, 1.228E+00, 2.350E+03, 1.656E+03]),
    (60, [2.220E+01, 1.770E+01, 1.749E+00, 1.230E+00, 2.330E+03, 1.648E+03]),
    (61, [2.220E+01, 1.770E+01, 1.741E+00, 1.229E+00, 2.311E+03, 1.640E+03]),
    (62, [2.220E+01, 1.770E+01, 1.730E+00, 1.225E+00, 2.292E+03, 1.632E+03]),
    (63, [2.220E+01, 1.770E+01, 1.716E+00, 1.220E+00, 2.272E+03, 1.623E+03]),
    (64, [2.220E+01, 1.770E+01, 1.699E+00, 1.212E+00, 2.251E+03, 1.614E+03]),
    (65, [2.220E+01, 1.770E+01, 1.680E+00, 1.203E+00, 2.229E+03, 1.605E+03]),
    (66, [2.220E+01, 1.770E+01, 1.662E+00, 1.195E+00, 2.206E+03, 1.595E+03]),
    (67, [2.220E+01, 1.770E+01, 1.648E+00, 1.190E+00, 2.183E+03, 1.585E+03]),
    (68, [2.220E+01, 1.770E+01, 1.638E+00, 1.187E+00, 2.158E+03, 1.575E+03]),
    (69, [2.220E+01, 1.770E+01, 1.630E+00, 1.187E+00, 2.132E+03, 1.564E+03]),
    (70, [2.220E+01, 1.770E+01, 1.623E+00, 1.188E+00, 2.106E+03, 1.554E+03]),
    (71, [2.220E+01, 1.770E+01, 1.613E+00, 1.188E+00, 2.079E+03, 1.545E+03]),
    (72, [2.220E+01, 1.770E+01, 1.602E+00, 1.187E+00, 2.054E+03, 1.537E+03]),
    (73, [2.220E+01, 1.770E+01, 1.590E+00, 1.185E+00, 2.030E+03, 1.528E+03]),
    (74, [2.220E+01, 1.770E+01, 1.577E+00, 1.183E+00, 2.009E+03, 1.518E+03]),
    (75, [2.220E+01, 1.770E+01, 1.564E+00, 1.179E+00, 1.990E+03, 1.508E+03]),
    (76, [2.220E+01, 1.770E+01, 1.553E+00, 1.175E+00, 1.973E+03, 1.498E+03]),
    (77, [2.220E+01, 1.770E+01, 1.545E+00, 1.171E+00, 1.958E+03, 1.487E+03]),
    (78, [2.220E+01, 1.770E+01, 1.540E+00, 1.169E+00, 1.945E+03, 1.476E+03]),
    (79, [2.220E+01, 1.770E+01, 1.538E+00, 1.167E+00, 1.934E+03, 1.464E+03]),
    (80, [2.220E+01, 1.770E+01, 1.537E+00, 1.164E+00, 1.926E+03, 1.454E+03]),
    (81, [2.220E+01, 1.770E+01, 1.536E+00, 1.162E+00, 1.921E+03, 1.449E+03]),
    (82, [2.220E+01, 1.770E+01, 1.535E+00, 1.159E+00, 1.917E+03, 1.445E+03]),
    (83, [2.220E+01, 1.770E+01, 1.534E+00, 1.157E+00, 1.912E+03, 1.442E+03]),
    (84, [2.220E+01, 1.770E+01, 1.532E+00, 1.155E+00, 1.907E+03, 1.438E+03]),
    (85, [2.220E+01, 1.770E+01, 1.530E+00, 1.153E+00, 1.902E+03, 1.434E+03]),
    (86, [2.220E+01, 1.770E+01, 1.527E+00, 1.152E+00, 1.897E+03, 1.431E+03]),
    (87, [2.220E+01, 1.770E+01, 1.525E+00, 1.150E+00, 1.891E+03, 1.426E+03]),
    (88, [2.220E+01, 1.770E+01, 1.522E+00, 1.148E+00, 1.885E+03, 1.422E+03]),
    (89, [2.220E+01, 1.770E+01, 1.519E+00, 1.146E+00, 1.879E+03, 1.418E+03]),
    (90, [2.220E+01, 1.770E+01, 1.517E+00, 1.144E+00, 1.873E+03, 1.413E+03]),
    (91, [2.220E+01, 1.770E+01, 1.514E+00, 1.142E+00, 1.867E+03, 1.408E+03]),
    (92, [2.220E+01, 1.770E+01, 1.511E+00, 1.140E+00, 1.860E+03, 1.403E+03]),
    (93, [2.220E+01, 1.770E+01, 1.509E+00, 1.138E+00, 1.853E+03, 1.398E+03]),
    (94, [2.220E+01, 1.770E+01, 1.506E+00, 1.136E+00, 1.847E+03, 1.393E+03]),
    (95, [2.220E+01, 1.770E+01, 1.503E+00, 1.134E+00, 1.839E+03, 1.388E+03]),
    (96, [2.220E+01, 1.770E+01, 1.500E+00, 1.132E+00, 1.832E+03, 1.382E+03]),
    (97, [2.220E+01, 1.770E+01, 1.496E+00, 1.129E+00, 1.824E+03, 1.377E+03]),
    (98, [2.220E+01, 1.770E+01, 1.493E+00, 1.127E+00, 1.816E+03, 1.371E+03]),
    (99, [2.220E+01, 1.770E+01, 1.490E+00, 1.125E+00, 1.808E+03, 1.365E+03]),
    (100, [2.220E+01, 1.770E+01, 1.486E+00, 1.122E+00, 1.800E+03, 1.359E+03]),
    (101, [2.220E+01, 1.770E+01, 1.483E+00, 1.119E+00, 1.792E+03, 1.352E+03]),
    (102, [2.220E+01, 1.770E+01, 1.480E+00, 1.117E+00, 1.783E+03, 1.346E+03]),
    (103, [2.220E+01, 1.770E+01, 1.476E+00, 1.114E+00, 1.774E+03, 1.339E+03]),
    (104, [2.220E+01, 1.770E+01, 1.473E+00, 1.111E+00, 1.765E+03, 1.332E+03]),
    (105, [2.220E+01, 1.770E+01, 1.469E+00, 1.109E+00, 1.756E+03, 1.326E+03]),
    (106, [2.220E+01, 1.770E+01, 1.465E+00, 1.106E+00, 1.746E+03, 1.318E+03]),
    (107, [2.220E+01, 1.770E+01, 1.461E+00, 1.103E+00, 1.737E+03, 1.311E+03]),
    (108, [2.220E+01, 1.770E+01, 1.457E+00, 1.101E+00, 1.727E+03, 1.304E+03]),
    (109, [2.220E+01, 1.770E+01, 1.453E+00, 1.098E+00, 1.717E+03, 1.300E+03]),
    (110, [2.220E+01, 1.770E+01, 1.447E+00, 1.097E+00, 1.700E+03, 1.300E+03]),
    (111, [2.220E+01, 1.770E+01, 1.441E+00, 1.096E+00, 1.700E+03, 1.300E+03]),
    (112, [2.220E+01, 1.770E+01, 1.435E+00, 1.094E+00, 1.700E+03, 1.300E+03]),
    (113, [2.220E+01, 1.770E+01, 1.429E+00, 1.093E+00, 1.700E+03, 1.300E+03]),
    (114, [2.220E+01, 1.770E+01, 1.425E+00, 1.089E+00, 1.700E+03, 1.300E+03]),
    (115, [2.220E+01, 1.770E+01, 1.421E+00, 1.086E+00, 1.700E+03, 1.300E+03]),
    (116, [2.220E+01, 1.770E+01, 1.416E+00, 1.083E+00, 1.700E+03, 1.300E+03]),
    (117, [2.220E+01, 1.770E+01, 1.412E+00, 1.079E+00, 1.700E+03, 1.300E+03]),
    (118, [2.220E+01, 1.770E+01, 1.407E+00, 1.076E+00, 1.700E+03, 1.300E+03]),
    (119, [2.220E+01, 1.770E+01, 1.402E+00, 1.072E+00, 1.700E+03, 1.300E+03]),
    (120, [2.220E+01, 1.770E+01, 1.398E+00, 1.069E+00, 1.700E+03, 1.300E+03]),
  ]);
  return usage_data
}

fn main() {
    tauri::Builder::default()
        .invoke_handler(tauri::generate_handler![usage, survival::survival])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
